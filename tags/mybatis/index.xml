<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mybatis on ybakiame&#39; Blog</title>
    <link>https://example.com/tags/mybatis/</link>
    <description>Recent content in mybatis on ybakiame&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Nov 2021 12:39:17 +0800</lastBuildDate><atom:link href="https://example.com/tags/mybatis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mybatis 使用druid连接池</title>
      <link>https://example.com/p/mybatis-%E4%BD%BF%E7%94%A8druid%E8%BF%9E%E6%8E%A5%E6%B1%A0/</link>
      <pubDate>Mon, 15 Nov 2021 12:39:17 +0800</pubDate>
      
      <guid>https://example.com/p/mybatis-%E4%BD%BF%E7%94%A8druid%E8%BF%9E%E6%8E%A5%E6%B1%A0/</guid>
      <description>mybatis使用Druid连接池 在 util包下新建一个 DruidDataSourceFactory类
package com.edu.util; import com.alibaba.druid.pool.DruidDataSource; import org.apache.ibatis.datasource.DataSourceFactory; import org.apache.ibatis.datasource.pooled.PooledDataSourceFactory; import javax.sql.DataSource; import java.sql.SQLException; import java.util.Properties; //public class DruidDataSourceFactory extends PooledDataSourceFactory { // public DruidDataSourceFactory() { // this.dataSource = new DruidDataSource(); // } //}  public class DruidDataSourceFactory implements DataSourceFactory { private Properties props; @Override public DataSource getDataSource() { DruidDataSource dds = new DruidDataSource(); dds.setDriverClassName(this.props.getProperty(&amp;#34;driver&amp;#34;)); dds.setUrl(this.props.getProperty(&amp;#34;url&amp;#34;)); dds.setUsername(this.props.getProperty(&amp;#34;username&amp;#34;)); dds.setPassword(this.props.getProperty(&amp;#34;password&amp;#34;)); // 其他配置可以根据MyBatis主配置文件进行配置  try { dds.init(); } catch (SQLException e) { e.</description>
    </item>
    
    <item>
      <title>MyBatis07 缓存</title>
      <link>https://example.com/p/mybatis07-%E7%BC%93%E5%AD%98/</link>
      <pubDate>Tue, 09 Nov 2021 09:58:40 +0800</pubDate>
      
      <guid>https://example.com/p/mybatis07-%E7%BC%93%E5%AD%98/</guid>
      <description>mybatis缓存 简介 1、什么是缓存 [ Cache ]？
 存在内存中的临时数据。 将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。  2、为什么使用缓存？
 减少和数据库的交互次数，减少系统开销，提高系统效率。  3、什么样的数据能使用缓存？
 经常查询并且不经常改变的数据。  Mybatis缓存   MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。
  MyBatis系统中默认定义了两级缓存：一级缓存和二级缓存
   默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存） 二级缓存需要手动开启和配置，他是基于namespace级别的缓存。 为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存    一级缓存 一级缓存也叫本地缓存：
 与数据库同一次会话期间查询到的数据会放在本地缓存中。 以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；  注意：
必须保证多次查询中间，不能有任何的增删改操作，否则缓存数据会清空。
1、在mybatis中加入日志，方便测试结果
2、编写接口方法
//根据id查询用户 User queryUserById(@Param(&amp;#34;id&amp;#34;) int id); 3、接口对应的Mapper文件
&amp;lt;select id=&amp;#34;queryUserById&amp;#34; resultType=&amp;#34;user&amp;#34;&amp;gt; select * from user where id = #{id} &amp;lt;/select&amp;gt; 4、测试
@Test public void testQueryUserById(){ SqlSession session = MybatisUtils.</description>
    </item>
    
    <item>
      <title>MyBatis06 动态SQL</title>
      <link>https://example.com/p/mybatis06-%E5%8A%A8%E6%80%81sql/</link>
      <pubDate>Tue, 09 Nov 2021 09:57:49 +0800</pubDate>
      
      <guid>https://example.com/p/mybatis06-%E5%8A%A8%E6%80%81sql/</guid>
      <description>动态SQL 介绍 什么是动态SQL：动态SQL指的是根据不同的查询条件 , 生成不同的Sql语句.
官网描述： MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。 虽然在以前使用动态 SQL 并非一件易事，但正是 MyBatis 提供了可以被用在任意 SQL 映射语句中的强大的动态 SQL 语言得以改进这种情形。 动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。 ------------------------------- - if - choose (when, otherwise) - trim (where, set) - foreach ------------------------------- 我们之前写的 SQL 语句都比较简单，如果有比较复杂的业务，我们需要写复杂的 SQL 语句，往往需要拼接，而拼接 SQL ，稍微不注意，由于引号，空格等缺失可能都会导致错误。
那么怎么去解决这个问题呢？这就要使用 mybatis 动态SQL，通过 if, choose, when, otherwise, trim, where, set, foreach等标签，可组合成非常灵活的SQL语句，从而在提高 SQL 语句的准确性的同时，也大大提高了开发人员的效率。</description>
    </item>
    
    <item>
      <title>MyBatis05 一对多和多对一处理</title>
      <link>https://example.com/p/mybatis05-%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%92%8C%E5%A4%9A%E5%AF%B9%E4%B8%80%E5%A4%84%E7%90%86/</link>
      <pubDate>Tue, 09 Nov 2021 09:56:14 +0800</pubDate>
      
      <guid>https://example.com/p/mybatis05-%E4%B8%80%E5%AF%B9%E5%A4%9A%E5%92%8C%E5%A4%9A%E5%AF%B9%E4%B8%80%E5%A4%84%E7%90%86/</guid>
      <description>一对多和多对一处理 多对一的处理 多对一的理解：
 多个学生对应一个老师 如果对于学生这边，就是一个多对一的现象，即从学生这边关联一个老师！  CREATETABLE`teacher`(`id`INT(10)NOTNULL,`name`VARCHAR(30)DEFAULTNULL,PRIMARYKEY(`id`))ENGINE=INNODBDEFAULTCHARSET=utf8INSERTINTOteacher(`id`,`name`)VALUES(1,&amp;#39;张老师&amp;#39;);CREATETABLE`student`(`id`INT(10)NOTNULL,`name`VARCHAR(30)DEFAULTNULL,`tid`INT(10)DEFAULTNULL,PRIMARYKEY(`id`),KEY`fktid`(`tid`),CONSTRAINT`fktid`FOREIGNKEY(`tid`)REFERENCES`teacher`(`id`))ENGINE=INNODBDEFAULTCHARSET=utf8INSERTINTO`student`(`id`,`name`,`tid`)VALUES(&amp;#39;1&amp;#39;,&amp;#39;小明&amp;#39;,&amp;#39;1&amp;#39;);INSERTINTO`student`(`id`,`name`,`tid`)VALUES(&amp;#39;2&amp;#39;,&amp;#39;小红&amp;#39;,&amp;#39;1&amp;#39;);INSERTINTO`student`(`id`,`name`,`tid`)VALUES(&amp;#39;3&amp;#39;,&amp;#39;小张&amp;#39;,&amp;#39;1&amp;#39;);INSERTINTO`student`(`id`,`name`,`tid`)VALUES(&amp;#39;4&amp;#39;,&amp;#39;小李&amp;#39;,&amp;#39;1&amp;#39;);INSERTINTO`student`(`id`,`name`,`tid`)VALUES(&amp;#39;5&amp;#39;,&amp;#39;小王&amp;#39;,&amp;#39;1&amp;#39;);搭建测试环境 1、IDEA安装Lombok插件
2、引入Maven依赖
&amp;lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.16.10&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 3、在代码中增加注解
@Data //GET,SET,ToString，有参，无参构造 public class Teacher { private int id; private String name; } @Data public class Student { private int id; private String name; //多个学生可以是同一个老师，即多对一  private Teacher teacher; } 4、编写实体类对应的Mapper接口 【两个】
 无论有没有需求，都应该写上，以备后来之需！  public interface StudentMapper { } public interface TeacherMapper { } 5、编写Mapper接口对应的 mapper.xml配置文件 【两个】
 无论有没有需求，都应该写上，以备后来之需！  &amp;lt;?</description>
    </item>
    
    <item>
      <title>MyBatis04 使用注解开发</title>
      <link>https://example.com/p/mybatis04-%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</link>
      <pubDate>Tue, 09 Nov 2021 09:55:20 +0800</pubDate>
      
      <guid>https://example.com/p/mybatis04-%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</guid>
      <description>使用注解开发 面向接口编程  大家之前都学过面向对象编程，也学习过接口，但在真正的开发中，很多时候我们会选择面向接口编程 根本原因 : 解耦 , 可拓展 , 提高复用 , 分层开发中 , 上层不用管具体的实现 , 大家都遵守共同的标准 , 使得开发变得容易 , 规范性更好 在一个面向对象的系统中，系统的各种功能是由许许多多的不同对象协作完成的。在这种情况下，各个对象内部是如何实现自己的,对系统设计人员来讲就不那么重要了； 而各个对象之间的协作关系则成为系统设计的关键。小到不同类之间的通信，大到各模块之间的交互，在系统设计之初都是要着重考虑的，这也是系统设计的主要工作内容。面向接口编程就是指按照这种思想来编程。  关于接口的理解   接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。
  接口的本身反映了系统设计人员对系统的抽象理解。
  接口应有两类：
   第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)； 第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；    一个体有可能有多个抽象面。抽象体与抽象面是有区别的。
  三个面向区别   面向对象是指，我们考虑问题时，以对象为单位，考虑它的属性及方法 .
  面向过程是指，我们考虑问题时，以一个具体的流程（事务过程）为单位，考虑它的实现 .
  接口设计与非接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题.更多的体现就是对系统整体的架构
  利用注解开发   mybatis最初配置信息是基于 XML ,映射语句(SQL)也是定义在 XML 中的。而到MyBatis 3提供了新的基于注解的配置。不幸的是，Java 注解的的表达力和灵活性十分有限。最强大的 MyBatis 映射并不能用注解来构建</description>
    </item>
    
    <item>
      <title>MyBatis03 ResultMap及分页</title>
      <link>https://example.com/p/mybatis03-resultmap%E5%8F%8A%E5%88%86%E9%A1%B5/</link>
      <pubDate>Tue, 09 Nov 2021 09:53:47 +0800</pubDate>
      
      <guid>https://example.com/p/mybatis03-resultmap%E5%8F%8A%E5%88%86%E9%A1%B5/</guid>
      <description>ResultMap 查询为null问题 要解决的问题：属性名和字段名不一致
环境：新建一个项目，将之前的项目拷贝过来
1、查看之前的数据库的字段名
id name pwd
2、Java中的实体类设计
public class User { private int id; //id  private String name; //姓名  private String password; //密码和数据库不一样！ } 3、接口
//根据id查询用户 User selectUserById(int id); 4、mapper映射文件
&amp;lt;select id=&amp;#34;selectUserById&amp;#34; resultType=&amp;#34;user&amp;#34;&amp;gt; select * from user where id = #{id} &amp;lt;/select&amp;gt; 5、测试
@Test public void testSelectUserById() { SqlSession session = MybatisUtils.getSession(); //获取SqlSession连接  UserMapper mapper = session.getMapper(UserMapper.class); User user = mapper.selectUserById(1); System.out.println(user); session.close(); } 结果:</description>
    </item>
    
    <item>
      <title>MyBatis02 增删改查</title>
      <link>https://example.com/p/mybatis02-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</link>
      <pubDate>Tue, 09 Nov 2021 09:52:53 +0800</pubDate>
      
      <guid>https://example.com/p/mybatis02-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</guid>
      <description>CRUD操作  SQL语句返回值类型。【完整的类名或者别名】 传入SQL语句的参数类型 。【万能的Map，可以多尝试使用】 命名空间中唯一的标识符 接口中的方法名与映射文件中的SQL语句ID 一一对应 id parameterType resultType  select 标签  id 相应dao层方法 parameterType 传入参数类型 resultType 返回对象  需求：根据id查询用户
1、在UserMapper中添加对应方法
public interface UserMapper { //根据id查询用户  User selectUserById(int id); } 2、在UserMapper.xml中添加Select语句
&amp;lt;select id=&amp;#34;selectUserById&amp;#34; resultType=&amp;#34;com.xxgc.pojo.User&amp;#34;&amp;gt; select * from user where id = #{id} &amp;lt;/select&amp;gt; 3、测试类中测试
@Test public void tsetSelectUserById() { SqlSession session = MybatisUtils.getSession(); //获取SqlSession连接  UserMapper mapper = session.getMapper(UserMapper.class); User user = mapper.selectUserById(1); System.out.println(user); session.close(); } insert 标签 需求：给数据库增加一个用户</description>
    </item>
    
    <item>
      <title>mybatis3 教师笔记</title>
      <link>https://example.com/p/mybatis3-%E6%95%99%E5%B8%88%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 09 Nov 2021 09:52:53 +0800</pubDate>
      
      <guid>https://example.com/p/mybatis3-%E6%95%99%E5%B8%88%E7%AC%94%E8%AE%B0/</guid>
      <description>一、Mybatis 3的学习  MyBatis logo 
 mybatisplus 
1.1 什么是Mybatis MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。
官网：https://mybatis.org/mybatis-3/zh/index.html
用来学习最新的API
中文网：http://www.mybatis.cn/
用来查看使用技巧
1.2 Mybatis的历史 原是apache的一个开源项目iBatis，2010年6月这个项目由apache迁移到了google code，随着开发团队转投Google code旗下，ibatis3.x正式更名为Mybatis，代码于2013年11月迁移到Github。
1.3 Mybatis的优势  基于sql语句编程，使用灵活，sql与程序代码的解耦 与JDBC相比减少50%代码，减少大量冗余代码，不需要手动开关连接 只要支持jdbc的数据库都支持Mybatis 与spring集成 支持面向对象编程，对象与ORM表映射  二、Mybaits环境搭建 2.1 创建数据库和表 /* SQLyog Ultimate v12.09 (64 bit) MySQL - 5.5.54 : Database - mybatis ********************************************************************* *//*!40101 SET NAMES utf8 */;/*!40101 SET SQL_MODE=&amp;#39;&amp;#39;*/;/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;/*!</description>
    </item>
    
    <item>
      <title>MyBatis01 环境配置</title>
      <link>https://example.com/p/mybatis01-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Tue, 09 Nov 2021 09:50:26 +0800</pubDate>
      
      <guid>https://example.com/p/mybatis01-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
      <description>MyBatis简介 什么是MyBatis   MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。
  MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集的过程
  MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 实体类 【Plain Old Java Objects,普通的 Java对象】映射成数据库中的记录。
  Mybatis的历史   MyBatis 本是apache的一个开源项目ibatis, 2010年这个项目由apache 迁移到了google code，并且改名为MyBatis 。
  2013年11月迁移到Github .
  Mybatis官方文档 : http://www.mybatis.org/mybatis-3/zh/index.html
  GitHub : https://github.com/mybatis/mybatis-3
  持久化 持久化是将程序数据在持久状态和瞬时状态间转换的机制。
 即把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）。 JDBC就是一种持久化机制。文件IO也是一种持久化机制。  为什么需要持久化服务呢？那是由于内存本身的缺陷引起的
 内存断电后数据会丢失，但有一些对象是无论如何都不能丢失的，比如银行账号等，遗憾的是，人们还无法保证内存永不掉电。 内存过于昂贵，与硬盘、光盘等外存相比。所以即使对象不需要永久保存，也会因为内存的容量限制不能一直呆在内存中，需要持久化来缓存到外存。  持久层 什么是持久层？
 完成持久化工作的代码块 . &amp;mdash;-&amp;gt; dao层 【DAO (Data Access Object) 数据访问对象】 大多数情况下特别是企业级应用，数据持久化往往也就意味着将内存中的数据保存到磁盘上加以固化，而持久化的实现过程则大多通过各种关系数据库来完成。 不过这里有一个字需要特别强调，也就是所谓的“层”。对于应用系统而言，数据持久功能大多是必不可少的组成部分。也就是说，我们的系统中，已经天然的具备了“持久层”概念？也许是，但也许实际情况并非如此。之所以要独立出一个“持久层”的概念,而不是“持久模块”，“持久单元”，也就意味着，我们的系统架构中，应该有一个相对独立的逻辑层面，专注于数据持久化逻辑的实现.</description>
    </item>
    
    <item>
      <title>Mybatis报错解决合集</title>
      <link>https://example.com/p/mybatis%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E5%90%88%E9%9B%86/</link>
      <pubDate>Tue, 19 Oct 2021 19:43:35 +0800</pubDate>
      
      <guid>https://example.com/p/mybatis%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3%E5%90%88%E9%9B%86/</guid>
      <description>根报错 Cause: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure org.apache.ibatis.exceptions.PersistenceException: ### Error querying database. Cause: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure The last packet successfully received from the server was 128 milliseconds ago. The last packet sent successfully to the server was 125 milliseconds ago. ### The error may exist in com/xxgc/mybatis/mapper/MoneyMapper.java (best guess) ### The error may involve com.xxgc.mybatis.mapper.MoneyMapper.selectMoneyAndUser_COUNT ### The error occurred while executing a query ### Cause: com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure The last packet successfully received from the server was 128 milliseconds ago.</description>
    </item>
    
  </channel>
</rss>
