<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java基础 on ybakiame&#39; Blog</title>
    <link>https://example.com/categories/java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in java基础 on ybakiame&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Oct 2021 22:26:26 +0800</lastBuildDate><atom:link href="https://example.com/categories/java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java命名规范参考</title>
      <link>https://example.com/p/java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E5%8F%82%E8%80%83/</link>
      <pubDate>Sat, 23 Oct 2021 22:26:26 +0800</pubDate>
      
      <guid>https://example.com/p/java%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83%E5%8F%82%E8%80%83/</guid>
      <description>Java命名规范参考！ 文章摘自https://www.cnblogs.com/liqiangchn/p/12000361.html
简洁清爽的代码风格应该是大多数工程师所期待的。在工作中笔者常常因为起名字而纠结，夸张点可以说是编程5分钟，命名两小时！究竟为什么命名成为了工作中的拦路虎。
每个公司都有不同的标准，目的是为了保持统一，减少沟通成本，提升团队研发效能。所以本文中是笔者结合阿里巴巴开发规范，以及工作中的见闻针对Java领域相关命名进行整理和总结，仅供参考。
Java中的命名规范 好的命名能体现出代码的特征，含义或者是用途，让阅读者可以根据名称的含义快速厘清程序的脉络。不同语言中采用的命名形式大相径庭，Java中常用到的命名形式共有三种，既首字母大写的UpperCamelCase，首字母小写的lowerCamelCase以及全部大写的并用下划线分割单词的UPPER_CAMEL_UNSER_SCORE。通常约定，类一般采用大驼峰命名，方法和局部变量使用小驼峰命名，而大写下划线命名通常是常量和枚举中使用。
   类型 约束 例     项目名 全部小写，多个单词用中划线分隔‘-’ spring-cloud   包名 全部小写 com.alibaba.fastjson   类名 单词首字母大写 Feature, ParserConfig,DefaultFieldDeserializer   变量名 首字母小写，多个单词组成时，除首个单词，其他单词首字母都要大写 password, userName   常量名 全部大写，多个单词，用&#39;_&amp;lsquo;分隔 CACHE_EXPIRED_TIME   方法 同变量 read(), readObject(), getById()    包命名 包名统一使用小写，点分隔符之间有且仅有一个自然语义的英文单词或者多个单词自然连接到一块（如 springframework，deepspace不需要使用任何分割）。包名统一使用单数形式，如果类命有复数含义，则可以使用复数形式。
包名的构成可以分为以下几四部分【前缀】 【发起者名】【项目名】【模块名】。常见的前缀可以分为以下几种：
   前缀名 例 含义     indi（或onem ） indi.发起者名.项目名.模块名.…… 个体项目，指个人发起，但非自己独自完成的项目，可公开或私有项目，copyright主要属于发起者。   pers pers.</description>
    </item>
    
  </channel>
</rss>
