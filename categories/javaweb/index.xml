<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javaWeb on ybakiame&#39; Blog</title>
    <link>https://example.com/categories/javaweb/</link>
    <description>Recent content in javaWeb on ybakiame&#39; Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Nov 2021 18:40:41 +0800</lastBuildDate><atom:link href="https://example.com/categories/javaweb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>API返回值去除为NULL的字段</title>
      <link>https://example.com/p/api%E8%BF%94%E5%9B%9E%E5%80%BC%E5%8E%BB%E9%99%A4%E4%B8%BAnull%E7%9A%84%E5%AD%97%E6%AE%B5/</link>
      <pubDate>Sat, 06 Nov 2021 18:40:41 +0800</pubDate>
      
      <guid>https://example.com/p/api%E8%BF%94%E5%9B%9E%E5%80%BC%E5%8E%BB%E9%99%A4%E4%B8%BAnull%E7%9A%84%E5%AD%97%E6%AE%B5/</guid>
      <description>API返回值去除为NULL的字段 简介 在前后端分离的微服务时代，后端API需要良好的规范。本篇主要将一个数据返回时的一个小技巧&amp;ndash; 过滤为空字段 解决痛点：将有效解决数据传输过程中的流量浪费。
组件简介 Jackson ObjectMapper 通过自定义配置该组件可以选择性序列化返回的JSON。
官方解释 Spring MVC（客户端和服务器端）用于HttpMessageConverters在HTTP交换中协商内容转换。如果Jackson在类路径上，您已经获得了提供的默认转换器Jackson2ObjectMapperBuilder，其中一个实例是为您自动配置的。 Spring Boot还具有一些功能，可以更轻松地自定义此行为。
实战代码 创建配置类 首先创建一个配置类，加入定义为：JacksonConfig
代码清单 import com.fasterxml.jackson.annotation.JsonInclude; import com.fasterxml.jackson.databind.ObjectMapper; import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Primary; import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder; /** * @author ybakiame * @description 返回json空值去掉null和&amp;#34;&amp;#34; * * 注解 @Configuration 注入后可自动配置 */ @Configuration public class JacksonConfig { @Bean @Primary @ConditionalOnMissingBean(ObjectMapper.class) public ObjectMapper jacksonObjectMapper(Jackson2ObjectMapperBuilder builder) { ObjectMapper objectMapper = builder.createXmlMapper(false).build(); objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL); return objectMapper; } } 关键点：objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL); 通过该方法对mapper对象进行设置，所有序列化的对象都将按改规则进行系列化。 其中枚举属性：JsonInclude.Include.NON_NULL有以下选择：</description>
    </item>
    
    <item>
      <title>Filter和Listener</title>
      <link>https://example.com/p/filter%E5%92%8Clistener/</link>
      <pubDate>Tue, 11 May 2021 15:29:19 +0800</pubDate>
      
      <guid>https://example.com/p/filter%E5%92%8Clistener/</guid>
      <description>Filter和Listener FIlter 指过滤器  概念   生活中的过滤器:空气过滤器 净水器 web中的过滤器:当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能 过滤器的一些功能: 一般用于完整通用的操作：  比如登录验证 统一编码设置 敏感字符过滤     快速入门:
  步骤:
 定义一个类 实现Filter接口， 复写方法 配置拦截资源: 注解配置 @WebFilter(&amp;quot;/*&amp;quot;) web.xml配置    @WebFilter(&amp;#34;/*&amp;#34;) public class FilterDemo implements Filter { @Override public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { System.out.println(&amp;#34;执行了filter&amp;#34;); chain.doFilter(request, response); } }     过滤器细节
  web.xml
  &amp;lt;filter&amp;gt; &amp;lt;filter-name&amp;gt;demo1&amp;lt;/filter-name&amp;gt; &amp;lt;filter-class&amp;gt;com.</description>
    </item>
    
    <item>
      <title>使用EL表达式</title>
      <link>https://example.com/p/%E4%BD%BF%E7%94%A8el%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Tue, 11 May 2021 15:29:19 +0800</pubDate>
      
      <guid>https://example.com/p/%E4%BD%BF%E7%94%A8el%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>EL（Expression Language） JSP表达式语言（EL）使得访问存储在JavaBean中的数据变得非常简单。JSP EL既可以用来创建算术表达式也可以用来创建逻辑表达式。在JSP EL表达式内可以使用整型数，浮点数，字符串，常量true、false，还有null。
一个简单的语法 ${expr} {expr} 其中，expr指的是表达式。在JSP EL中通用的操作符是 . 和 {} 。这两个操作符允许您通过内嵌的JSP对象访问各种各样的JavaBean属性。
&amp;lt;jsp:setProperty name=&amp;quot;box&amp;quot; property=&amp;quot;perimeter&amp;quot; name=&amp;quot;box&amp;quot; property=&amp;quot;perimeter&amp;quot; value=&amp;quot;${2*box.width+2*box.height}&amp;quot;/&amp;gt;value=&amp;quot;${2*box.width+2*box.height}&amp;quot;/&amp;gt; 当JSP编译器在属性中见到&amp;quot;${}&amp;ldquo;格式后，它会产生代码来计算这个表达式，并且产生一个替代品来代替表达式的值。
您也可以在标签的模板文本中使用表达式语言。比如jsp:text标签简单地将其主体中的文本插入到JSP输出中：
&amp;lt;jsp:text&amp;gt; &amp;lt;h1&amp;gt;Hello JSP!&amp;lt;/h1&amp;gt;&amp;lt;h1&amp;gt;Hello JSP!&amp;lt;/h1&amp;gt; &amp;lt;/jsp:text&amp;gt;&amp;lt;/jsp:text&amp;gt; 现在，在jsp:text标签主体中使用表达式，就像这样：
&amp;lt;jsp:text&amp;gt; Box Perimeter is: ${2*box.width + 2*box.height} &amp;lt;/jsp:text&amp;gt;&amp;lt;/jsp:text&amp;gt; 在EL表达式中可以使用圆括号来组织子表达式。比如${(1 + 2) * 3}等于9，但是${1 + (2 * 3)} 等于7。
想要停用对EL表达式的评估的话，需要使用page指令将isELIgnored属性值设为true：
&amp;lt;%@ page isELIgnored =&amp;quot;true|false&amp;quot; %&amp;gt; 这样，EL表达式就会被忽略。若设为false，则容器将会计算EL表达式。
 EL中的基础操作符 EL表达式支持大部分Java所提供的算术和逻辑操作符：
   操作符 描述     . 访问一个Bean属性或者一个映射条目   [] 访问一个数组或者链表的元素   ( ) 组织一个子表达式以改变优先级   + 加   - 减或负   * 乘   / or div 除   % or mod 取模   == or eq 测试是否相等   !</description>
    </item>
    
  </channel>
</rss>
